main 
var undefinedMainVar, definedMainVar, nonfold, a;

function mandelbrot(MBx,MBy);
var MBiters, MBx2, MBgo, MBx0, MBy0, undefinedFuncVar; 
{
    let MBx0 <- MBx;
    let MBy0 <- MBy;
    let MBiters <- 0;
    let MBgo <- 1;
    while MBgo != 0 do
        if MBx*MBx+MBy*MBy > 4*10000*10000 then
            let MBgo <- 0;
        fi;
        if MBiters >= 100 then
            let MBgo <- 0;
        fi;
        if MBgo != 0 then
            let MBx2 <- (MBx*MBx-MBy*MBy)/10000 + MBx0;
            let MBy <- (2*MBx*MBy)/10000 + MBy0;
            let MBx <- MBx2;
            let MBiters <- MBiters+1;
        fi;
    od;

    return MBiters;
};

void function printMandelbrot();
var MBpx, MBpy, MBmval;
{
    let MBpx <- 0;
    let MBpy <- 0;
    while MBpy < 200 do
        let MBpx <- 0;
        while MBpx < 200 do
            let MBmval <- call mandelbrot( ((MBpx-100)*4*10000)/200, ((MBpy-100)*4*10000)/200);
            if MBmval == 100 then
                call OutputNum(8);
            else
                call OutputNum(1);
            fi;
            let MBpx <- MBpx + 1;
        od;
        let MBpy <- MBpy + 1;
        call OutputNewLine();
    od;
};

function mod(xDPF,yDPF); 
{
    if yDPF == 0 then
        return xDPF;
    fi;
    while xDPF < 0 do
        let xDPF <- xDPF + yDPF;
    od;
    while xDPF >= yDPF do
        let xDPF <- xDPF - yDPF;
    od;
    return xDPF;
};

function gcd(xGCD,yGCD); 
{
    if xGCD == 0 then
        return yGCD;
    fi;
    return call gcd(yGCD, call mod(xGCD,yGCD));
};

function isPrime(num2DPF);
var iDPF, resultDPF;
{
    let resultDPF <- 1;
    if num2DPF < 2 then
        let resultDPF <- 0;
    else
        let iDPF <- 2;
        while iDPF * iDPF <= num2DPF do
            if call mod(num2DPF, iDPF) == 0 then
                let resultDPF <- 0;
                let iDPF <- num2DPF;
            else
                let iDPF <- iDPF + 1;
            fi;
        od;
    fi;
    return resultDPF;
};

function countDistinctPrimeFactors(numberDPF);
var countDPF, factorDPF;
{
    let countDPF <- 0;
    let factorDPF <- 2;
    while numberDPF > 1 do
        if call isPrime(factorDPF) > 0 then
            if call mod(numberDPF, factorDPF) == 0 then
                let countDPF <- countDPF + 1;
                while call mod(numberDPF, factorDPF) == 0 do
                    let numberDPF <- numberDPF / factorDPF;
                od;
            fi;
        fi;
        let factorDPF <- factorDPF + 1;
    od;
    return countDPF;
};

function returnOne();
{
    return 1;
};

function testEqualTo(valOne, valTwo, printValue);
{
    if valOne == valTwo then
        call OutputNum(printValue);
        call OutputNewLine();
    else
        call OutputNum(0-1234567890);
        call OutputNewLine();
    fi;
};

function earlyReturn1();
var a1, b1, c1;
{
    let b1 <- (0-7);
    while b1 < a1 do 
        let a1 <- a1 - 1;
        if c1 > 3 then
            return a1 - b1;
        fi;
        let c1 <- c1 + 1;
    od;
};

function earlyReturn2();
var a2, b2, c2;
{
    let b2 <- (0-7);
    while b2 < a2 do
        let a2 <- a2 - 1;
        if c2 > 3 then
            while c2 < 10 do
                return a2 - b2;
                let c2 <- c2 + 1;
            od;
        fi;
        let c2 <- c2 + 1;
    od;
    return 0;
};

function earlyReturn3(a3, b3, c3);
{
    if a3 < b3 then
        if a3 < c3 then
            return a3;
        else
            return c3;
        fi;
    else if b3 < c3 then
        return b3;
    else return c3; fi;
    fi;
};

function earlyReturn4(a4, b4, c4);
{
    if a4 < b4 then
        let c4 <- (0-5);
        if a4 < c4 then
            let c4 <- (0-3);
            return c4;
        else
            return c4;
        fi;
        let c4 <- 3;
        return c4;
    else if b4 < c4 then
        let c4 <- (0-10);
        return c4;
    else return c4; fi;
    fi;
};

{
    let definedMainVar <- 0;
    call printMandelbrot;
    call OutputNewLine;
    call OutputNewLine;
    call OutputNewLine;
    call OutputNewLine;
	call testEqualTo(call countDistinctPrimeFactors(0-12), 0, 1);
    call testEqualTo(call countDistinctPrimeFactors(13), 1, 2);
    call testEqualTo(call countDistinctPrimeFactors(510510), 7, 3);
    call testEqualTo(call countDistinctPrimeFactors(32), 1, 4);
    call testEqualTo(call isPrime(4001), 1, 5);
    call testEqualTo(call isPrime(4011), 0, 6);
    call testEqualTo(call mod(12,24), 12, 7);
    call testEqualTo(call mod(0-7,3), 2, 8);
    call testEqualTo(call gcd(15,320), 5, 9);
    call testEqualTo(call gcd(1,1), 1, 10);

    let a <- call earlyReturn1;
    call testEqualTo(a, 2, 11);
    let a <- call earlyReturn2;
    call testEqualTo(a, 2, 12);
    call testEqualTo(call earlyReturn3(1, 2, 3), 1, 13);
    call testEqualTo(call earlyReturn3(3, 2, 1), 1, 14);
    call testEqualTo(call earlyReturn3(2, 3, 1), 1, 15);
    call testEqualTo(call earlyReturn3(2, 1, 3), 1, 16);
    call testEqualTo(call earlyReturn4(1, 2, 3), (0-5), 17);
    call testEqualTo(call earlyReturn4(1, 2, 0), (0-5), 18);
    call testEqualTo(call earlyReturn4(4, 2, 10), (0-10), 19);
    call testEqualTo(call earlyReturn4(4, 2, 1), 1, 20);

    call testEqualTo(call InputNum(), 0-1, 21);
    call testEqualTo(call InputNum(), 1, 22);

    let nonfold <- call returnOne();
    while undefinedMainVar < nonfold do
        let nonfold <- nonfold - 1;
    od;
    return;    
    call OutputNewLine;
    call OutputNum(987654321);
}.


/*
*/
